import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { jwtVerify } from 'jose';

const JWT_SECRET = new TextEncoder().encode(process.env.JWT_SECRET!);

export async function middleware(request: NextRequest) {
  const token = request.cookies.get('token')?.value;

  console.log("üåê Path:", request.nextUrl.pathname);
  console.log("üç™ Token:", token);

  if (!token) {
    console.log("‚õî ‡πÑ‡∏°‡πà‡∏°‡∏µ token ‚Üí redirect");
    //return NextResponse.redirect(new URL('/signin', request.url));
    return NextResponse.next(); // ‚ùó ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å redirect ‚Üí ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ú‡πà‡∏≤‡∏ô
  }

  try {
    await jwtVerify(token, JWT_SECRET);
    console.log("‚úÖ Token valid ‚Üí ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ú‡πà‡∏≤‡∏ô");
    return NextResponse.next();
  } catch (err) {
    console.warn("‚ö†Ô∏è Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‚Üí ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ frontend refresh error: "+err);
    return NextResponse.next();
  }
}

export const config = {
  matcher: ['/', '/users/:path*', '/admin/:path*'],
};
